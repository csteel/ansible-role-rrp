---
# file: roles/rrp/tasks/main/yml
#
# any required remote or local directories are create via the **ensure_dirs** role as described in this roles meta/main.yml file.

## get active interface

- name: "get the name of the current active interface"
  become: true
  shell: route | grep '^default' | grep -o '[^ ]*$'
  ignore_errors: true
  register: rrp_route_default_interface
  when: ansible_os_family == "Debian"
  tags: [ 'packages', 'rrp', 'interface' ]


- debug: var=rrp_route_default_interface.stdout
  tags: [ 'debug', 'rrp', 'interface' ]

- name: Set var rrp_active_interface
  set_fact:
    rrp_active_interface: '{{ rrp_route_default_interface.stdout }}'

- debug: var=rrp_active_interface
  tags: [ 'debug', 'rrp', 'interface' ]

# Ensure for local directories on our Ansible controller

- name: ensure for local directories
  delegate_to: 127.0.0.1
  file:
    state   : '{{ item.value.state   | default("directory") }}'
    path    : '{{ item.value.path }}/{{ ansible_hostname }}/rrp'
    owner   : '{{ item.value.owner   | default(omit) }}'
    group   : '{{ item.value.group   | default(omit) }}'
    mode    : '{{ item.value.mode    | default(omit) }}'
    recurse : '{{ item.value.recurse | default(omit) }}'
  with_dict: rrp_ensure_dirs_on_local

# template our active interface to our rrp inteface config file

- name: "running our interface.j2 templates on a per host basis"
  local_action: template
    backup=yes
    src='host_vars/rrp/interfaces.j2'
    dest='host_vars/{{ ansible_hostname }}/rrp'

# apt

- name: update apt cache
  become: true
  apt: update_cache=yes cache_valid_time=43200
  tags: [ 'packages' ]

## ensure any (Ubuntu) packages installed 

- name: Install any required packages
  become: true
  apt:
    name: '{{ item.value.package }}'
    state: present
  with_dict: '{{ rrp_ensure_dirs_on_remote }}'
#  when: item.value.package != 'null'

# Ensure for remote directories on our target host(s)

# run remote command

- name: run remote commands
  become: true
  shell: "'{{ item.value.command }}' '{{ item.value.command_options }}' > '{{ item.value.command }}'.txt"
  args:
    chdir: '{{ item.value.path }}'
  with_dict: rrp_ensure_dirs_on_remote

# ensure remote permissions

- name: ensure for permissions on remote file
  become: true
  file:
    state   : touch
    path    : "{{ item.value.path }}{{ rrp_slash }}{{ item.value.command }}.txt"
    owner   : '{{ item.value.owner   | default(omit) }}'
    group   : '{{ item.value.group   | default(omit) }}'
    mode    : '{{ item.value.mode    | default(omit) }}'
  with_dict: rrp_ensure_dirs_on_remote

# fetch file

- name: fetch our command output and place in controller directory
  become: false
  fetch:
    src="{{ item.value.path }}{{ rrp_slash }}{{ item.value.command }}.txt"
    dest="{{ rrp_ensure_dirs_on_local.project_home_ace_fetched_files.path }}"
    flat=no
  with_dict: rrp_ensure_dirs_on_remote

